// Generated by CoffeeScript 1.9.3
(function() {
  var Deproute, Queue;

  Queue = (function() {
    function Queue() {
      this.queue = [];
      this.waiting = false;
    }

    Queue.prototype.add = function(fn, ths, args) {
      if (this.waiting) {
        return this.queue.push([fn, ths, args]);
      } else {
        return fn.apply(ths, args);
      }
    };

    Queue.prototype.pause = function() {
      return this.waiting = true;
    };

    Queue.prototype["continue"] = function() {
      var fn, i, ref;
      this.waiting = false;
      ref = this.queue;
      for (i in ref) {
        fn = ref[i];
        fn[0].apply(fn[1], fn[2]);
        if (this.waiting) {
          this.queue = this.queue.slice(i, this.queue.length);
          break;
        }
      }
      return this.queue = [];
    };

    return Queue;

  })();

  Deproute = (function() {
    function Deproute(routes) {
      this.routes = routes;
      this.current = [];
    }

    Deproute.prototype.runRoute = function(path) {
      var diff, fn, i, j, k, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, show;
      this.queue = new Queue;
      this.path = path;
      diff = 0;
      if (this.current.toString() === path.toString()) {
        diff = path.length - 2;
      } else {
        while (this.current[diff] === path[diff]) {
          ++diff;
        }
        while ((ref = this.getRoute(this.current.slice(0, diff))) != null ? ref.goback : void 0) {
          --diff;
        }
      }
      if (diff !== 0 && diff !== this.current.length) {
        for (i = j = ref1 = this.current.length - 1, ref2 = diff; ref1 <= ref2 ? j <= ref2 : j >= ref2; i = ref1 <= ref2 ? ++j : --j) {
          if ((ref3 = this.getRoute(this.current.slice(0, +i + 1 || 9e9))) != null) {
            if ((ref4 = ref3.hide) != null) {
              ref4.apply(this);
            }
          }
        }
      }
      show = false;
      for (i = k = ref5 = diff, ref6 = path.length; ref5 <= ref6 ? k < ref6 : k > ref6; i = ref5 <= ref6 ? ++k : --k) {
        fn = (ref7 = this.getRoute(path.slice(0, +i + 1 || 9e9))) != null ? ref7.show : void 0;
        if (fn != null) {
          this.queue.add(fn, this, [this.param]);
        }
        show = true;
      }
      if (show && (fn == null)) {
        this.notfound();
      }
      this.current = path;
      console.log("Route: " + (path.join('/')));
      return typeof _gaq !== "undefined" && _gaq !== null ? _gaq.push(['_trackPageview', path.join('/')]) : void 0;
    };

    Deproute.prototype.getRoute = function(path) {
      var findMatch;
      findMatch = (function(_this) {
        return function(p, obj) {
          var content, j, key, len, m, param, sub;
          param = [];
          for (key in obj) {
            content = obj[key];
            if (key[0] === ':') {
              param.push(key);
              continue;
            }
            if (key === p[0]) {
              if (p.length === 1) {
                return content;
              } else {
                if (content.sub != null) {
                  m = findMatch(p.slice(1, p.length), content.sub);
                  if (m != null) {
                    return m;
                  }
                }
              }
            }
          }
          for (j = 0, len = param.length; j < len; j++) {
            key = param[j];
            if (p.length === 1) {
              _this.param = p[0];
              return obj[key];
            } else {
              sub = obj[key].sub;
              if (sub != null) {
                m = findMatch(p.slice(1, p.length), sub);
                if (m != null) {
                  return m;
                }
              }
            }
          }
          return null;
        };
      })(this);
      return findMatch(path, this.routes);
    };

    Deproute.prototype.notfound = function() {
      console.log("Error: route " + location.hash + " not found");
      return location.hash = this.defaultRoute;
    };

    Deproute.prototype.runHash = function() {
      var route;
      route = location.hash;
      return this.runRoute(route.slice(2, route.length).split('/'));
    };

    Deproute.prototype.run = function(defaultRoute) {
      var app;
      this.defaultRoute = defaultRoute;
      location.hash || (location.hash = defaultRoute);
      app = this;
      window.addEventListener('hashchange', (function() {
        return app.runHash.apply(app);
      }), false);
      return this.runHash();
    };

    return Deproute;

  })();

  window.Deproute = Deproute;

}).call(this);
