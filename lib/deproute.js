// Generated by CoffeeScript 1.3.3
(function() {
  var Deproute, Queue;

  Queue = (function() {

    function Queue() {
      this.queue = [];
      this.waiting = false;
    }

    Queue.prototype.add = function(fn, ths, args) {
      if (this.waiting) {
        return this.queue.push([fn, ths, args]);
      } else {
        return fn.apply(ths, args);
      }
    };

    Queue.prototype.pause = function() {
      return this.waiting = true;
    };

    Queue.prototype["continue"] = function() {
      var fn, i, _ref;
      this.waiting = false;
      _ref = this.queue;
      for (i in _ref) {
        fn = _ref[i];
        fn[0].apply(fn[1], fn[2]);
        if (this.waiting) {
          this.queue = this.queue.slice(i, this.queue.length);
          break;
        }
      }
      return this.queue = [];
    };

    return Queue;

  })();

  Deproute = (function() {

    function Deproute(routes) {
      this.routes = routes;
      this.current = [];
    }

    Deproute.prototype.runRoute = function(path) {
      var diff, fn, i, show, _i, _j, _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
      this.queue = new Queue;
      this.path = path;
      diff = 0;
      if (this.current.toString() === path.toString()) {
        diff = path.length - 2;
      } else {
        while (this.current[diff] === path[diff]) {
          ++diff;
        }
        while ((_ref = this.getRoute(this.current.slice(0, diff))) != null ? _ref.goback : void 0) {
          --diff;
        }
      }
      if (diff !== 0 && diff !== this.current.length) {
        for (i = _i = _ref1 = this.current.length - 1; _ref1 <= diff ? _i <= diff : _i >= diff; i = _ref1 <= diff ? ++_i : --_i) {
          if ((_ref2 = this.getRoute(this.current.slice(0, i + 1 || 9e9))) != null) {
            if ((_ref3 = _ref2.hide) != null) {
              _ref3.apply(this);
            }
          }
        }
      }
      show = false;
      for (i = _j = diff, _ref4 = path.length; diff <= _ref4 ? _j < _ref4 : _j > _ref4; i = diff <= _ref4 ? ++_j : --_j) {
        fn = (_ref5 = this.getRoute(path.slice(0, i + 1 || 9e9))) != null ? _ref5.show : void 0;
        if (fn != null) {
          this.queue.add(fn, this, [this.param]);
        }
        show = true;
      }
      if (show && !(fn != null)) {
        this.notfound();
      }
      this.current = path;
      console.log("Route: " + (path.join('/')));
      return typeof _gaq !== "undefined" && _gaq !== null ? _gaq.push(['_trackPageview', path.join('/')]) : void 0;
    };

    Deproute.prototype.getRoute = function(path) {
      var findMatch,
        _this = this;
      findMatch = function(p, obj) {
        var content, key, m, param, sub, _i, _len;
        param = [];
        for (key in obj) {
          content = obj[key];
          if (key[0] === ':') {
            param.push(key);
            continue;
          }
          if (key === p[0]) {
            if (p.length === 1) {
              return content;
            } else {
              if (content.sub != null) {
                m = findMatch(p.slice(1, p.length), content.sub);
                if (m != null) {
                  return m;
                }
              }
            }
          }
        }
        for (_i = 0, _len = param.length; _i < _len; _i++) {
          key = param[_i];
          if (p.length === 1) {
            _this.param = p[0];
            return obj[key];
          } else {
            sub = obj[key].sub;
            if (sub != null) {
              m = findMatch(p.slice(1, p.length), sub);
              if (m != null) {
                return m;
              }
            }
          }
        }
        return null;
      };
      return findMatch(path, this.routes);
    };

    Deproute.prototype.notfound = function() {
      console.log("Error: route " + location.hash + " not found");
      return location.hash = this.defaultRoute;
    };

    Deproute.prototype.runHash = function() {
      var route;
      route = location.hash;
      return this.runRoute(route.slice(2, route.length).split('/'));
    };

    Deproute.prototype.run = function(defaultRoute) {
      var app;
      this.defaultRoute = defaultRoute;
      location.hash || (location.hash = defaultRoute);
      app = this;
      window.addEventListener('hashchange', (function() {
        return app.runHash.apply(app);
      }), false);
      return this.runHash();
    };

    return Deproute;

  })();

  window.Deproute = Deproute;

}).call(this);
