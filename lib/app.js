// Generated by CoffeeScript 1.3.3
(function() {
  var TabMedia, adjustFooter, app, calcPlanetX, calcPlanetY, compiled, createFeatureOverlay, currentLang, currentMissionsPlanet, doResize, extendDetailTab, general, getIndex, getPlanetImage, go, highlightTab, interpolate, lang, openWindow, planetdetail, positionDetails, positionHabZone, positionMissions, positionPlanets, positionSolWind, registerPartials, rmFeatureOverlay, rmResize, setPlanetPos, templates;

  general = null;

  templates = null;

  compiled = {};

  lang = null;

  currentLang = null;

  $.getJSON('data/general.json', function(data) {
    return general = data;
  });

  $.getJSON('data/templates.json', function(data) {
    return templates = data;
  });

  TabMedia = (function() {

    function TabMedia(media, planet) {
      var i, li, m, ol;
      this.media = media;
      this.planet = planet;
      this.image = $('.image', planetdetail());
      if (!this.media) {
        this.image.hide();
        $('.text', planetdetail()).css('right', 0);
        return;
      }
      if (this.media.length > 1) {
        ol = $('.caption ol', this.image);
        m = this;
        for (i in this.media) {
          li = $("<li><div></div></li>").addClass("c" + (+i + 1)).click(function(e) {
            return m.show($(this).data('index'));
          });
          li.data('index', i);
          ol.append(li);
        }
      }
      this.show(0);
    }

    TabMedia.prototype.show = function(item) {
      var content, img, li, url, vfile, video;
      img = this.image.children('img');
      video = $('.video', this.image);
      vfile = this.media[item].video;
      if (vfile) {
        img.hide();
        video.replaceWith(interpolate(templates.video, {
          url: ("images/tab/" + this.planet + "/") + vfile,
          youtube: this.media[item].yt,
          width: 550,
          height: 309
        }));
        video = $('.video', this.image);
        video.hover(function() {
          return video.children('.yt').addClass('show');
        }, function() {
          return video.children('.yt').removeClass('show');
        });
      } else {
        video.empty().hide();
        img.show().attr('src', getPlanetImage(this.media[item], this.planet, 'med')).unbind('click');
        url = getPlanetImage(this.media[item], this.planet, 'high');
        if (url) {
          img.click(function() {
            return openWindow(url);
          });
          img.css('cursor', 'pointer');
        } else {
          img.css('cursor', 'default');
        }
      }
      content = $('.caption .content', this.image);
      $('h1', content).text(this.media[item].caption);
      $('div', content).html(this.media[item].desc);
      li = $('.caption li', this.image);
      li.removeClass('r2');
      return li.eq(item).addClass('r2');
    };

    return TabMedia;

  })();

  registerPartials = function() {
    return Handlebars.registerPartial('header', templates.header);
  };

  Handlebars.registerHelper('version', function(block) {
    var key, v, version;
    return ((function() {
      var _i, _len, _ref, _results;
      _ref = this.versions;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        version = _ref[_i];
        v = ((function() {
          var _results1;
          _results1 = [];
          for (key in version) {
            _results1.push(key);
          }
          return _results1;
        })())[0];
        _results.push(block({
          num: v,
          v: version[v]
        }));
      }
      return _results;
    }).call(this)).join('');
  });

  doResize = function(fn) {
    fn();
    return $(window).resize(fn);
  };

  rmResize = function(fn) {
    return $(window).unbind('resize', fn);
  };

  interpolate = function(template, data) {
    compiled[template] || (compiled[template] = Handlebars.compile(template));
    return compiled[template](data);
  };

  setPlanetPos = function(i, x, y) {
    var e;
    e = $('#planets .planet').eq(i);
    if (x) {
      e.css('left', "" + (x - general.planets[i].offset.x) + "px");
    }
    if (y) {
      return e.css('top', "" + (y - general.planets[i].offset.y) + "px");
    }
  };

  calcPlanetX = function(percent) {
    var padding, width;
    padding = general.pdata.padding;
    width = $('#planets').width() - padding.left - padding.right;
    return padding.left + percent * width / 100;
  };

  calcPlanetY = function() {
    return $('#planets').height() / 1.7;
  };

  positionPlanets = function() {
    var ypos;
    ypos = calcPlanetY();
    return $('#planets .planet').each(function(i, e) {
      var xpos;
      xpos = calcPlanetX(general.planets[i].xpos);
      return setPlanetPos(i, xpos, ypos);
    });
  };

  positionDetails = function() {
    var detail, e, footer, header;
    e = $('header.logo');
    header = e.offset().top + e.height();
    footer = $('#features').offset().top;
    detail = planetdetail();
    return detail.css('top', (footer + header - detail.height()) / 2);
  };

  positionHabZone = function() {
    var data, habzone, left, wdt, xpos;
    habzone = $('#habzone');
    data = general.features.habzone;
    xpos = data.x;
    wdt = data.wdt;
    left = calcPlanetX(xpos);
    habzone.css('left', left);
    return habzone.width(calcPlanetX(xpos + wdt) - left);
  };

  positionSolWind = function() {
    var e, offset, x, y;
    e = $('#solwind');
    offset = general.features.solwind.offset;
    x = calcPlanetX(general.planets[2].xpos);
    y = calcPlanetY();
    e.css('left', "" + (x - offset.x) + "px");
    return e.css('top', "" + (y - offset.y) + "px");
  };

  currentMissionsPlanet = null;

  positionMissions = function() {
    var xpos;
    xpos = calcPlanetX(general.planets[currentMissionsPlanet].xpos);
    return $('.missions').css('left', xpos);
  };

  adjustFooter = function() {
    var footer, hgt, max;
    footer = $('#main > footer');
    footer.css('height', 'auto');
    hgt = $('#container').height();
    max = 797;
    if (hgt - footer.height() > max) {
      footer.height(hgt - max);
    }
    return $('#content').height(hgt - footer.height());
  };

  planetdetail = function() {
    return $('.planetdetail:not(.old)');
  };

  highlightTab = function(tab) {
    return $('.tab', planetdetail()).removeClass('selected').eq(tab).addClass('selected');
  };

  openWindow = function(url, options) {
    if (options == null) {
      options = 'fullscreen';
    }
    if (url) {
      return window.open(url, options);
    }
  };

  getPlanetImage = function(img, planet, res) {
    var auto;
    if (res === 'high' && img.nohr) {
      return;
    }
    auto = function(r) {
      return "" + (img.auto || img.video) + "_" + (r[0].toUpperCase() + r.slice(1, r.length)) + "Res.jpg";
    };
    return "images/tab/" + planet + "/" + (img[res] || auto(res));
  };

  getIndex = function(id, obj) {
    var data, index;
    for (index in obj) {
      data = obj[index];
      if (data.id === id) {
        break;
      } else {
        index = null;
      }
    }
    return index;
  };

  extendDetailTab = function(tdata, planet) {
    return $.extend(true, tdata, general.detail.all[tdata.id], general.detail.planets[planet][tdata.id]);
  };

  createFeatureOverlay = function(close) {
    $('#planets').append('<div id="feature-overlay"></div>');
    if (close) {
      return $('#feature-overlay').click(function() {
        return location.hash = "#/" + currentLang + "/main";
      });
    }
  };

  rmFeatureOverlay = function() {
    return $('#feature-overlay').remove();
  };

  app = new Deproute({
    ':lang': {
      show: function(l) {
        var _this = this;
        if (l !== 'de') {
          return this.notfound();
        }
        if (currentLang !== l) {
          this.queue.pause();
          return $.getJSON("data/" + l + ".json", function(data) {
            lang = data;
            window.lang = lang;
            currentLang = l;
            return _this.queue["continue"]();
          });
        }
      },
      sub: {
        'main': {
          show: function() {
            var center, li, t;
            $('#container').html(interpolate(templates.main, lang));
            $('#content').html(interpolate(templates.planets, {
              lang: currentLang,
              planets: $.extend(true, [], general.planets, lang.planets)
            }));
            $('#planets .planet').each(function(i, e) {
              var planet;
              planet = general.planets[i].id;
              $(e).mouseenter(function() {
                return $('img', this).attr('src', "images/planets/" + planet + "_Hover.png");
              });
              $(e).mouseleave(function() {
                return $('img', this).attr('src', "images/planets/" + planet + ".png");
              });
              $(e).click(function() {
                if ($(e).data('link')) {
                  return window.location = $(e).data('link');
                }
              });
              if (general.detail.planets[planet] == null) {
                return $(e).data('no_link', true).data('link', '').css('cursor', 'default');
              }
            });
            doResize(adjustFooter);
            $('#main > footer img').load(function() {
              adjustFooter();
              return $(this).unbind('load');
            });
            doResize(positionPlanets);
            $('#content').append(interpolate(templates.features, lang));
            center = function(e) {
              var t;
              t = $('div', e);
              return t.css('left', -(t.width() - e.width()) / 2);
            };
            li = $('#features li');
            t = this;
            return li.each(function(i, e) {
              e = $(e);
              e.addClass('c' + (i + 1));
              e.hover(function() {
                return center(e);
              });
              e.bind('highlight', function() {
                e.addClass('r2');
                return center(e);
              });
              return e.click(function() {
                var feature, prev;
                li.removeClass('r2');
                prev = t.path[3];
                feature = e.data('feature');
                if (feature === 'standard' || feature === prev) {
                  return location.hash = "#/" + currentLang + "/main";
                } else {
                  e.trigger('highlight');
                  return location.hash = "#/" + currentLang + "/main/feature/" + feature;
                }
              });
            });
          },
          sub: {
            'planet': {
              sub: {
                ':planet': {
                  show: function(planet) {
                    var cwidth, i, id, loc, newwidth, tabc, tabs, tdata, width, _i, _len, _ref;
                    id = getIndex(planet, general.planets);
                    if (id == null) {
                      return this.notfound();
                    }
                    this.currentPlanet = planet;
                    loc = '#/' + this.path.slice(0, 4).join('/');
                    tabs = [];
                    this.tabs = {};
                    _ref = lang.detail[planet].meta;
                    for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
                      tdata = _ref[i];
                      tdata = extendDetailTab(tdata, planet);
                      this.tabs[tdata.id] = i;
                      tabs.push({
                        style: "background-color: " + tdata.color,
                        location: "" + loc + "/" + tdata.id,
                        title: tdata.title || tdata.id
                      });
                    }
                    $('#content').append(interpolate(templates.planetdetail, {
                      title: lang.planets[id].name,
                      tabs: tabs,
                      lang: currentLang
                    }));
                    tabc = $('.tabs', planetdetail());
                    tabs = $('.tab', tabc);
                    cwidth = tabc.width();
                    width = 0;
                    tabs.each(function(i, e) {
                      return width += $(e).width();
                    });
                    newwidth = 0;
                    tabs.each(function(i, e) {
                      var wdt;
                      wdt = $(e).width() * cwidth / width;
                      newwidth += wdt;
                      $(e).width(wdt);
                      return $(e).children().addClass('fill');
                    });
                    doResize(positionDetails);
                    planetdetail().css('display', 'none').fadeIn('slow');
                    createFeatureOverlay(true);
                    if (!this.path[4]) {
                      return location.hash = "" + loc + "/" + lang.detail[planet].meta[0].id;
                    }
                  },
                  hide: function() {
                    rmFeatureOverlay();
                    planetdetail().addClass('old').fadeOut('slow', function() {
                      return $(this).remove();
                    });
                    return rmResize(positionDetails);
                  },
                  sub: {
                    ':tab': {
                      show: function(tab) {
                        var t, tabs, text;
                        text = lang.detail[this.currentPlanet][tab];
                        if (text == null) {
                          return this.notfound();
                        }
                        highlightTab(this.tabs[tab]);
                        $('.content', planetdetail()).html(interpolate(templates.planetdetailcontent, {
                          text: text
                        }));
                        tabs = lang.detail[this.currentPlanet].meta;
                        t = extendDetailTab(tabs[getIndex(tab, tabs)], this.currentPlanet);
                        this.tabMedia = new TabMedia(t.media, this.currentPlanet);
                        return $('.nano', planetdetail()).nanoScroller();
                      }
                    },
                    'media': {
                      show: function() {
                        var m, media, planet, tab, _i, _len, _ref;
                        highlightTab(this.tabs['media']);
                        media = [];
                        _ref = lang.detail[this.currentPlanet].meta;
                        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                          tab = _ref[_i];
                          if (tab.media) {
                            media = media.concat(extendDetailTab(tab, this.currentPlanet).media);
                          }
                        }
                        $('.content', planetdetail()).html(interpolate(templates.planetdetailmedia, {
                          planet: this.currentPlanet,
                          media: (function() {
                            var _j, _len1, _results;
                            _results = [];
                            for (_j = 0, _len1 = media.length; _j < _len1; _j++) {
                              m = media[_j];
                              _results.push({
                                thumb: getPlanetImage(m, this.currentPlanet, 'low'),
                                caption: m.caption,
                                smallcaption: m.smallcaption
                              });
                            }
                            return _results;
                          }).call(this)
                        }));
                        planet = this.currentPlanet;
                        return $('.content > .media', planetdetail()).children().each(function(i, e) {
                          var url;
                          url = media[i].yt && 'http://youtu.be/' + media[i].yt || getPlanetImage(media[i], planet, 'high') || getPlanetImage(media[i], planet, 'med');
                          if (url) {
                            return $(e).click(function() {
                              return openWindow(url);
                            });
                          } else {
                            return $(e).css('cursor', 'default');
                          }
                        });
                      }
                    }
                  }
                }
              }
            },
            'feature': {
              show: function() {
                var feature, footer, li, text;
                feature = this.path[3];
                if (feature) {
                  li = $('#features li');
                  if (!li.hasClass('r2')) {
                    li.each(function(i, e) {
                      e = $(e);
                      if (e.data('feature') === feature) {
                        return e.trigger('highlight');
                      }
                    });
                  }
                  text = lang.footer.feature[feature];
                  if (text) {
                    footer = $('#main > footer');
                    footer.children().hide();
                    footer.append("<section id=featurefooter>" + text + "</section>");
                    return adjustFooter();
                  }
                }
              },
              hide: function() {
                var footer;
                $('#features li').removeClass('r2');
                footer = $('#featurefooter');
                if (footer.length) {
                  footer.remove();
                  $('#main > footer > section').show();
                  return adjustFooter();
                }
              },
              goback: true,
              sub: {
                'missions': {
                  show: function() {
                    var _this = this;
                    $('#planets').append(interpolate(templates.missionshint, lang.missions.Hint));
                    return $('#planets .planet').each(function(i, e) {
                      var planet;
                      e = $(e);
                      e.data('normal_link', e.data('link'));
                      planet = e.attr('id');
                      if (lang.missions[planet] != null) {
                        e.data('link', '#/' + _this.path.slice(0, 4).join('/') + '/' + planet);
                        return e.css('cursor', 'pointer');
                      } else {
                        e.data('link', '');
                        return e.css('cursor', 'default');
                      }
                    });
                  },
                  hide: function() {
                    $('#missionshint').remove();
                    return $('#planets .planet').each(function(i, e) {
                      e = $(e);
                      e.data('link', e.data('normal_link'));
                      if (e.data('no_link')) {
                        return e.css('cursor', 'default');
                      }
                    });
                  },
                  sub: {
                    ':planet': {
                      show: function(planet) {
                        var check, data, f, first, missions, p, s, scroller, span, strings;
                        missions = lang.missions[planet];
                        if (missions == null) {
                          return location.hash = '#/' + this.path.slice(0, 3).join('/');
                        }
                        data = {
                          missions: [],
                          summary: {}
                        };
                        check = function(m, status) {
                          var v;
                          if (m != null) {
                            m = (function() {
                              var _i, _len, _results;
                              _results = [];
                              for (_i = 0, _len = m.length; _i < _len; _i++) {
                                v = m[_i];
                                _results.push({
                                  flag: v[0],
                                  year: v[1],
                                  mission: v[2],
                                  status: status
                                });
                              }
                              return _results;
                            })();
                            data.missions = data.missions.concat(m);
                            return m.length;
                          } else {
                            return 0;
                          }
                        };
                        s = check(missions.success, 'success');
                        p = check(missions.partial, 'partial');
                        f = check(missions.fail, 'fail');
                        data.missions.sort(function(a, b) {
                          return a.year - b.year;
                        });
                        strings = lang.missions.Strings;
                        data.summary = {
                          total: strings[0] + ': ' + (s + p + f),
                          success: strings[1] + ': ' + s,
                          partial: strings[2] + ': ' + p,
                          fail: strings[3] + ': ' + f
                        };
                        data.lang = currentLang;
                        $('#planets').append(interpolate(templates.missions, data));
                        missions = $('#planets .missions');
                        span = $('p span', missions).click(function() {
                          var all, e, klass;
                          e = $(this);
                          if (e.hasClass('selected')) {
                            return;
                          }
                          klass = e.attr('class');
                          if (klass === 'total') {
                            all = true;
                          }
                          $('li', missions).each(function(i, li) {
                            li = $(li);
                            if (all || li.hasClass(klass)) {
                              return li.show();
                            } else {
                              return li.hide();
                            }
                          });
                          span.removeClass('selected');
                          e.addClass('selected');
                          return scroller();
                        });
                        span.first().addClass('selected');
                        first = true;
                        scroller = function() {
                          var nano, stop;
                          nano = $('.nano', missions);
                          stop = nano.height() > nano.children().prop('scrollHeight');
                          if (!(first && stop)) {
                            nano.nanoScroller({
                              stop: stop
                            });
                            return first = false;
                          }
                        };
                        scroller();
                        currentMissionsPlanet = getIndex(planet, general.planets);
                        return doResize(positionMissions);
                      },
                      hide: function() {
                        rmResize(positionMissions);
                        return $('.missions').remove();
                      }
                    }
                  }
                },
                'habzone': {
                  show: function() {
                    createFeatureOverlay();
                    $('#planets').append(templates.habzone);
                    return doResize(positionHabZone);
                  },
                  hide: function() {
                    rmFeatureOverlay();
                    $('#habzone').remove();
                    return rmResize(positionHabZone);
                  }
                },
                'solwind': {
                  show: function() {
                    $('#planets .planet').hide();
                    $('#planets').append(templates.solwind);
                    return doResize(positionSolWind);
                  },
                  hide: function() {
                    $('#planets .planet').show();
                    $('#solwind').remove();
                    return rmResize(positionSolWind);
                  }
                },
                'albedo': {
                  show: function() {
                    var e, i, planet, _ref, _results;
                    createFeatureOverlay();
                    $('#bg-end').hide();
                    this.albedo_bg = $('#planets').css('background-image');
                    $('#planets').css('background-image', 'none');
                    this.albedo_previous = [];
                    _ref = general.planets;
                    _results = [];
                    for (i in _ref) {
                      planet = _ref[i];
                      e = $('#planets .planet img').eq(i);
                      this.albedo_previous.push(e.attr('src'));
                      _results.push(e.attr('src', "images/features/Albedo_" + planet.id + ".png"));
                    }
                    return _results;
                  },
                  hide: function() {
                    var i, _results;
                    rmFeatureOverlay();
                    $('#bg-end').show();
                    $('#planets').css('background-image', this.albedo_bg);
                    _results = [];
                    for (i in general.planets) {
                      _results.push($('#planets .planet img').eq(i).attr('src', this.albedo_previous[i]));
                    }
                    return _results;
                  }
                },
                'temperature': {
                  show: function() {
                    var e, padding;
                    $('#planets').append(templates.temperature);
                    $('#temperature').append("<img src='images/features/Temp_Graph_" + currentLang + ".png' alt=''>");
                    e = $('#temperature > div');
                    padding = general.pdata.padding;
                    e.css('left', padding.left);
                    return e.css('right', padding.right);
                  },
                  hide: function() {
                    return $('#temperature').remove();
                  }
                },
                'suns': {
                  show: function() {
                    var goto, suns,
                      _this = this;
                    createFeatureOverlay(true);
                    $('#planets').append(templates.suns);
                    this.suns = {
                      e: $('#suns')
                    };
                    goto = function(p) {
                      if (!$('.slider', suns).length) {
                        return location.hash = "#/" + (_this.path.slice(0, 4).join('/')) + "/" + p;
                      }
                    };
                    if (!this.path[4]) {
                      goto(1);
                    }
                    suns = this.suns.e;
                    $('.left', suns).click(function() {
                      return goto((+_this.suns.page) - 1);
                    });
                    return $('.right', suns).click(function() {
                      return goto((+_this.suns.page) + 1);
                    });
                  },
                  hide: function() {
                    $('#suns').remove();
                    return rmFeatureOverlay();
                  },
                  sub: {
                    ':page': {
                      show: function(page) {
                        var createImg, dir, out, prev, suns, url, wdt;
                        url = function(p) {
                          return "images/features/suns_" + p + ".jpg";
                        };
                        suns = this.suns.e.css('background-image', "url(" + (url(page)) + ")");
                        prev = this.suns.page;
                        if (prev) {
                          wdt = suns.width();
                          dir = prev < page ? '-' : '+';
                          createImg = function(src) {
                            return $("<div class=slider></div>").css('background-image', "url(" + src + ")").prependTo(suns);
                          };
                          out = createImg(url(prev));
                          $("<img src='" + (url(page)) + "'>").hide().appendTo('body').load(function() {
                            var sin;
                            sin = createImg(url(page)).css('background-position', wdt + 'px 0');
                            $({
                              e: sin,
                              pos: -(dir + wdt)
                            }).add({
                              e: out,
                              pos: 0
                            }).animate({
                              pos: dir + '=' + wdt
                            }, {
                              duration: 800,
                              step: function() {
                                return this.e.css('background-position', this.pos + 'px 0');
                              },
                              complete: function() {
                                return this.e.remove();
                              }
                            });
                            return $(this).remove();
                          });
                        }
                        this.suns.page = page;
                        $('.left, .right').show();
                        switch (page) {
                          case '1':
                            return $('.left', suns).hide();
                          case general.features.suns.num:
                            return $('.right', suns).hide();
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        'versions': {
          show: function() {
            $('#container').css('display', 'table').html(interpolate(templates.versions, lang));
            return $('#container ul li:first-child').remove();
          },
          hide: function() {
            return $('#container').css('display', 'block');
          }
        },
        'meta': {
          show: function() {
            return $('#container').html(interpolate(templates.meta, lang));
          }
        }
      }
    }
  });

  window.app = app;

  (go = function() {
    if ((general != null) && (templates != null)) {
      registerPartials();
      app.run('#/de/main');
      window.general = general;
      return window.templates = templates;
    } else {
      return setTimeout(go, 1);
    }
  })();

}).call(this);
